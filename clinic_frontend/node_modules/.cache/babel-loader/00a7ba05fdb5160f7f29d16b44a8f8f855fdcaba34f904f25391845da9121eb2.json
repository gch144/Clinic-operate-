{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaura\\\\Music\\\\clinic_frontend\\\\src\\\\components\\\\doctor\\\\EditAppointment.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditAppointment = () => {\n  _s();\n  const [appointment, setAppointment] = useState({\n    appointmentId: '',\n    description: ''\n  });\n  const navigate = useNavigate();\n  const location = useLocation();\n  setAuthToken();\n\n  // Update the appointment state with the appointmentId from location.state\n  useEffect(() => {\n    var _location$state;\n    const appointmentId = location === null || location === void 0 ? void 0 : (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.appointmentId;\n    setAppointment(prev => ({\n      ...prev,\n      appointmentId\n    }));\n  }, [location]);\n  const handleSaveChanges = async () => {\n    try {\n      console.log('Sending update request:', appointment);\n\n      // Check if required fields are provided\n      if (!appointment.appointmentId || !appointment.description) {\n        console.error('AppointmentId and Description are required.');\n        return;\n      }\n      await doctorAPi.checkAppointment(appointment);\n      console.log('Appointment updated successfully.');\n      // You can redirect to the doctor appointments page or perform other actions\n      navigate('/display-doctor-appointments');\n    } catch (error) {\n      console.error('Error updating appointment:', error);\n      if (error.response) {\n        console.error('Server responded with:', error.response.data);\n        const validationErrors = error.response.data.errors;\n        if (validationErrors) {\n          console.error('Validation errors:', validationErrors);\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Appointment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Description:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: appointment.description,\n      onChange: e => setAppointment({\n        ...appointment,\n        description: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSaveChanges,\n      children: \"Save Changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/display-doctor-appointments'),\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this);\n};\n_s(EditAppointment, \"5e2g8TkkcknP8Dy24yHtJxth92E=\", true);\n_c = EditAppointment;\nexport default EditAppointment;\nvar _c;\n$RefreshReg$(_c, \"EditAppointment\");","map":{"version":3,"names":["EditAppointment","_s","appointment","setAppointment","useState","appointmentId","description","navigate","useNavigate","location","useLocation","setAuthToken","useEffect","_location$state","state","prev","handleSaveChanges","console","log","error","doctorAPi","checkAppointment","response","data","validationErrors","errors","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gaura/Music/clinic_frontend/src/components/doctor/EditAppointment.js"],"sourcesContent":["const EditAppointment = () => {\r\n    const [appointment, setAppointment] = useState({\r\n      appointmentId: '',\r\n      description: '',\r\n    });\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n  \r\n    setAuthToken();\r\n  \r\n    // Update the appointment state with the appointmentId from location.state\r\n    useEffect(() => {\r\n      const appointmentId = location?.state?.appointmentId;\r\n      setAppointment((prev) => ({ ...prev, appointmentId }));\r\n    }, [location]);\r\n  \r\n    const handleSaveChanges = async () => {\r\n      try {\r\n        console.log('Sending update request:', appointment);\r\n  \r\n        // Check if required fields are provided\r\n        if (!appointment.appointmentId || !appointment.description) {\r\n          console.error('AppointmentId and Description are required.');\r\n          return;\r\n        }\r\n  \r\n        await doctorAPi.checkAppointment(appointment);\r\n        console.log('Appointment updated successfully.');\r\n        // You can redirect to the doctor appointments page or perform other actions\r\n        navigate('/display-doctor-appointments');\r\n      } catch (error) {\r\n        console.error('Error updating appointment:', error);\r\n        if (error.response) {\r\n          console.error('Server responded with:', error.response.data);\r\n          const validationErrors = error.response.data.errors;\r\n          if (validationErrors) {\r\n            console.error('Validation errors:', validationErrors);\r\n          }\r\n        }\r\n      }\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <h2>Edit Appointment</h2>\r\n        <label>Description:</label>\r\n        <textarea\r\n          value={appointment.description}\r\n          onChange={(e) => setAppointment({ ...appointment, description: e.target.value })}\r\n        />\r\n        <button onClick={handleSaveChanges}>Save Changes</button>\r\n        <button onClick={() => navigate('/display-doctor-appointments')}>Cancel</button>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default EditAppointment;\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}