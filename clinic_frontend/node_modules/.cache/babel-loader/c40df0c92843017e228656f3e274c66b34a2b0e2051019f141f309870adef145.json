{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaura\\\\Music\\\\clinic_frontend\\\\src\\\\components\\\\admin\\\\UnverifiedUserList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { adminApi, setAuthToken } from '../../api'; // Update the path\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UnverifiedUserList = () => {\n  _s();\n  const [unverifiedUsers, setUnverifiedUsers] = useState([]);\n  useEffect(() => {\n    const fetchUnverifiedUsers = async () => {\n      try {\n        // Set JWT token in headers before making any admin API requests\n        setAuthToken();\n        const response = await adminApi.getUnverifiedUsers();\n        console.log('API Response:', response.data);\n\n        // Ensure that response.data has the expected structure\n        if (response.data && Array.isArray(response.data.patientUsers)) {\n          setUnverifiedUsers(response.data.patientUsers);\n        } else {\n          console.error('Unexpected API response structure:', response.data);\n        }\n      } catch (error) {\n        console.error('Error fetching unverified users:', error);\n      }\n    };\n    fetchUnverifiedUsers();\n  }, []);\n  const handleVerifyUser = async userId => {\n    try {\n      // Set JWT token in headers before making any admin API requests\n      setAuthToken();\n\n      // Use the verifyUser API function to verify a user\n      const response = await adminApi.verifyUser(userId);\n      console.log('User verification successful:', response.data);\n      toast.success('User verification successful');\n\n      // Update the local state to reflect the change in verification status\n      setUnverifiedUsers(prevUsers => prevUsers.map(user => user.patientId === userId ? {\n        ...user,\n        isVerified: true\n      } : user));\n    } catch (error) {\n      console.error('Error verifying user:', error);\n      // Handle the error (display an error message, etc.)\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Unverified Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: unverifiedUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [user.name, \" - \", user.isVerified ? 'Verified' : 'Not Verified', !user.isVerified && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleVerifyUser(user.patientId),\n          children: \"Verify User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this)]\n      }, user.patientId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin-dashboard\",\n      children: \"Back to Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(UnverifiedUserList, \"1i0oAc17NhDDeuRXVvNlk9Jy14M=\");\n_c = UnverifiedUserList;\nexport default UnverifiedUserList;\nvar _c;\n$RefreshReg$(_c, \"UnverifiedUserList\");","map":{"version":3,"names":["React","useEffect","useState","adminApi","setAuthToken","toast","jsxDEV","_jsxDEV","UnverifiedUserList","_s","unverifiedUsers","setUnverifiedUsers","fetchUnverifiedUsers","response","getUnverifiedUsers","console","log","data","Array","isArray","patientUsers","error","handleVerifyUser","userId","verifyUser","success","prevUsers","map","user","patientId","isVerified","children","fileName","_jsxFileName","lineNumber","columnNumber","name","onClick","Link","to","_c","$RefreshReg$"],"sources":["C:/Users/gaura/Music/clinic_frontend/src/components/admin/UnverifiedUserList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { adminApi, setAuthToken } from '../../api'; // Update the path\r\nimport { toast } from 'react-toastify';\r\n\r\nconst UnverifiedUserList = () => {\r\n  const [unverifiedUsers, setUnverifiedUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchUnverifiedUsers = async () => {\r\n      try {\r\n        // Set JWT token in headers before making any admin API requests\r\n        setAuthToken();\r\n\r\n        const response = await adminApi.getUnverifiedUsers();\r\n        console.log('API Response:', response.data);\r\n\r\n        // Ensure that response.data has the expected structure\r\n        if (response.data && Array.isArray(response.data.patientUsers)) {\r\n          setUnverifiedUsers(response.data.patientUsers);\r\n        } else {\r\n          console.error('Unexpected API response structure:', response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching unverified users:', error);\r\n      }\r\n    };\r\n\r\n    fetchUnverifiedUsers();\r\n  }, []);\r\n\r\n  const handleVerifyUser = async (userId) => {\r\n    try {\r\n      // Set JWT token in headers before making any admin API requests\r\n      setAuthToken();\r\n\r\n      // Use the verifyUser API function to verify a user\r\n      const response = await adminApi.verifyUser(userId);\r\n      console.log('User verification successful:', response.data);\r\n      toast.success('User verification successful');\r\n\r\n      // Update the local state to reflect the change in verification status\r\n      setUnverifiedUsers((prevUsers) =>\r\n        prevUsers.map((user) =>\r\n          user.patientId === userId ? { ...user, isVerified: true } : user\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error('Error verifying user:', error);\r\n      // Handle the error (display an error message, etc.)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Unverified Users</h2>\r\n      <ul>\r\n        {unverifiedUsers.map((user) => (\r\n          <li key={user.patientId}>\r\n            {user.name} - {user.isVerified ? 'Verified' : 'Not Verified'}\r\n            {!user.isVerified && (\r\n              <button onClick={() => handleVerifyUser(user.patientId)}>\r\n                Verify User\r\n              </button>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <Link to=\"/admin-dashboard\">Back to Admin Dashboard</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UnverifiedUserList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}