{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaura\\\\Music\\\\clinic_frontend\\\\src\\\\components\\\\auth\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { authApi } from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const handleLogin = async e => {\n    e.preventDefault(); // Prevent default form submission behavior\n\n    try {\n      const credentials = {\n        username,\n        password\n      };\n      const response = await authApi.login(credentials);\n\n      // Assuming your API returns a JWT token\n      const jwtToken = response.loginInfo.token;\n      const userRole = response.loginInfo.userRole;\n      //   const name = response.loginInfo.name;\n      //   const userId = response.loginInfo.userId;\n\n      // Store the token in localStorage\n      localStorage.setItem('jwtToken', jwtToken);\n      localStorage.setItem('userRole', userRole);\n      toast.success('Login successful.');\n      console.log('Login successful:', response);\n\n      // Handle successful login (e.g., redirect to dashboard)\n    } catch (error) {\n      console.error('Login failed:', error);\n      // Handle login error (e.g., display error message)\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Username:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"wuQOK7xaXdVz4RMrZQhWbI751Oc=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","toast","authApi","jsxDEV","_jsxDEV","Login","_s","username","setUsername","password","setPassword","handleLogin","e","preventDefault","credentials","response","login","jwtToken","loginInfo","token","userRole","localStorage","setItem","success","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gaura/Music/clinic_frontend/src/components/auth/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { authApi } from '../../api';\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault(); // Prevent default form submission behavior\r\n      \r\n        try {\r\n          const credentials = { username, password };\r\n          const response = await authApi.login(credentials);\r\n      \r\n          // Assuming your API returns a JWT token\r\n          const jwtToken = response.loginInfo.token;\r\n          const userRole = response.loginInfo.userRole;\r\n        //   const name = response.loginInfo.name;\r\n        //   const userId = response.loginInfo.userId;\r\n\r\n      \r\n          // Store the token in localStorage\r\n          localStorage.setItem('jwtToken', jwtToken);\r\n          localStorage.setItem('userRole', userRole);\r\n           \r\n          toast.success('Login successful.');\r\n          console.log('Login successful:', response);\r\n      \r\n          // Handle successful login (e.g., redirect to dashboard)\r\n        } catch (error) {\r\n          console.error('Login failed:', error);\r\n          // Handle login error (e.g., display error message)\r\n        }\r\n      };\r\n      \r\n\r\n  return (\r\n    <div>\r\n      <h2>Login</h2>\r\n      <form>\r\n        <label>Username:</label>\r\n        <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n        <br />\r\n        <label>Password:</label>\r\n        <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n        <br />\r\n        <button type=\"button\" onClick={handleLogin}>Login</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}