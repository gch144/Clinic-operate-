{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaura\\\\Music\\\\clinic_frontend\\\\src\\\\components\\\\admin\\\\UnverifiedUserList.js\",\n  _s = $RefreshSig$();\n// UnverifiedUserList.js\nimport React, { useEffect, useState } from 'react';\nimport { adminApi, setAuthToken } from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UnverifiedUserList = () => {\n  _s();\n  const [unverifiedUsers, setUnverifiedUsers] = useState([]);\n  useEffect(() => {\n    // Set JWT token in headers before making any admin API requests\n    setAuthToken();\n\n    // Fetch unverified users on component mount\n    fetchUnverifiedUsers();\n  }, []);\n  const fetchUnverifiedUsers = async () => {\n    try {\n      const response = await adminApi.getUnverifiedUsers();\n      // Ensure that the response.data is always an array\n      const usersArray = Array.isArray(response.data) ? response.data : [];\n      setUnverifiedUsers(usersArray);\n    } catch (error) {\n      console.error('Error fetching unverified users:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Unverified Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: unverifiedUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: user.username\n      }, user.userId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(UnverifiedUserList, \"1i0oAc17NhDDeuRXVvNlk9Jy14M=\");\n_c = UnverifiedUserList;\nexport default UnverifiedUserList;\nvar _c;\n$RefreshReg$(_c, \"UnverifiedUserList\");","map":{"version":3,"names":["React","useEffect","useState","adminApi","setAuthToken","jsxDEV","_jsxDEV","UnverifiedUserList","_s","unverifiedUsers","setUnverifiedUsers","fetchUnverifiedUsers","response","getUnverifiedUsers","usersArray","Array","isArray","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","username","userId","_c","$RefreshReg$"],"sources":["C:/Users/gaura/Music/clinic_frontend/src/components/admin/UnverifiedUserList.js"],"sourcesContent":["// UnverifiedUserList.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { adminApi, setAuthToken } from '../../api';\r\n\r\nconst UnverifiedUserList = () => {\r\n  const [unverifiedUsers, setUnverifiedUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Set JWT token in headers before making any admin API requests\r\n    setAuthToken();\r\n\r\n    // Fetch unverified users on component mount\r\n    fetchUnverifiedUsers();\r\n  }, []);\r\n\r\n  const fetchUnverifiedUsers = async () => {\r\n    try {\r\n      const response = await adminApi.getUnverifiedUsers();\r\n      // Ensure that the response.data is always an array\r\n      const usersArray = Array.isArray(response.data) ? response.data : [];\r\n      setUnverifiedUsers(usersArray);\r\n    } catch (error) {\r\n      console.error('Error fetching unverified users:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Unverified Users</h2>\r\n      <ul>\r\n        {unverifiedUsers.map((user) => (\r\n          <li key={user.userId}>{user.username}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UnverifiedUserList;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,YAAY,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1DD,SAAS,CAAC,MAAM;IACd;IACAG,YAAY,CAAC,CAAC;;IAEd;IACAO,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,QAAQ,CAACU,kBAAkB,CAAC,CAAC;MACpD;MACA,MAAMC,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAACK,IAAI,CAAC,GAAGL,QAAQ,CAACK,IAAI,GAAG,EAAE;MACpEP,kBAAkB,CAACI,UAAU,CAAC;IAChC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D;EACF,CAAC;EAED,oBACEZ,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBlB,OAAA;MAAAc,QAAA,EACGX,eAAe,CAACgB,GAAG,CAAEC,IAAI,iBACxBpB,OAAA;QAAAc,QAAA,EAAuBM,IAAI,CAACC;MAAQ,GAA3BD,IAAI,CAACE,MAAM;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAqB,CAC1C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAChB,EAAA,CAhCID,kBAAkB;AAAAsB,EAAA,GAAlBtB,kBAAkB;AAkCxB,eAAeA,kBAAkB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}