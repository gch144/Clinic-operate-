{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaura\\\\Music\\\\clinic_frontend\\\\src\\\\components\\\\admin\\\\AllDoctors.js\",\n  _s = $RefreshSig$();\n// AllDoctors.js\nimport React, { useEffect, useState } from 'react';\nimport { adminApi, setAuthToken } from '../../api'; // Update the path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllDoctors = () => {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  useEffect(() => {\n    // Set JWT token in headers before making any admin API requests\n    setAuthToken();\n\n    // Fetch the list of all doctors\n    adminApi.getAllDoctors().then(response => {\n      setDoctors(response.data.doctors);\n      console.log('API Response:', response.data);\n    }).catch(error => {\n      console.error('Error fetching doctors:', error);\n    });\n  }, []); // Make sure to run this effect only once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"List of All Doctors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(AllDoctors, \"kcw5qKDPTTui1RDpe6DT6D3WwHo=\");\n_c = AllDoctors;\nexport default AllDoctors;\nvar _c;\n$RefreshReg$(_c, \"AllDoctors\");","map":{"version":3,"names":["React","useEffect","useState","adminApi","setAuthToken","jsxDEV","_jsxDEV","AllDoctors","_s","doctors","setDoctors","getAllDoctors","then","response","data","console","log","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gaura/Music/clinic_frontend/src/components/admin/AllDoctors.js"],"sourcesContent":["// AllDoctors.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { adminApi, setAuthToken } from '../../api'; // Update the path\r\n\r\nconst AllDoctors = () => {\r\n  const [doctors, setDoctors] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Set JWT token in headers before making any admin API requests\r\n    setAuthToken();\r\n\r\n    // Fetch the list of all doctors\r\n    adminApi.getAllDoctors()\r\n      .then(response => {\r\n        setDoctors(response.data.doctors);\r\n        console.log('API Response:', response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching doctors:', error);\r\n      });\r\n  }, []); // Make sure to run this effect only once on component mount\r\n\r\n  return (\r\n    <div>\r\n      <h2>List of All Doctors</h2>\r\n      <ul>\r\n        {/* {doctors.map(doctor => (\r\n          <li key={doctor.doctorId}>\r\n            {doctor.name} - {doctor.specialty}\r\n          </li>\r\n        ))} */}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllDoctors;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,YAAY,QAAQ,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACd;IACAG,YAAY,CAAC,CAAC;;IAEd;IACAD,QAAQ,CAACQ,aAAa,CAAC,CAAC,CACrBC,IAAI,CAACC,QAAQ,IAAI;MAChBH,UAAU,CAACG,QAAQ,CAACC,IAAI,CAACL,OAAO,CAAC;MACjCM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,QAAQ,CAACC,IAAI,CAAC;IAC7C,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAI;MACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEZ,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5BjB,OAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACf,EAAA,CA9BID,UAAU;AAAAiB,EAAA,GAAVjB,UAAU;AAgChB,eAAeA,UAAU;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}